<resources>
    <string name="app_name">23 Patrones De Diseño </string>
    <string name="abstract_factory">Abstract Factory</string>
    <string name="abstract_factory_description">Nos provee una interfaz que delega la
creación de un conjunto de objetos relacionados sin
necesidad de especificar en ningún momento cuáles son
las implementaciones concretas.</string>
    <string name="factory_method">Factory Method</string>
    <string name="factory_method_description">Expone un método de creación,
delegando en las subclases la implementación de este
método.</string>
    <string name="builder">Builder</string>
    <string name="builder_description">Separa la creación de un objeto complejo de su
estructura, de tal forma que el mismo proceso de
construcción nos puede servir para crear
representaciones diferentes.</string>
    <string name="singleton">Singleton</string>
    <string name="singleton_description">Limita a uno el número de instancias posibles
de una clase en nuestro programa, y proporciona uno
acceso global al mismo.</string>
    <string name="prototype">Prototype</string>
    <string name="prototype_description">Permite la creación de objetos basados en
«plantillas». Un nuevo objeto se crea a partir de la
clonación de otro objeto. </string>
    <string name="adapter">Adapter</string>
    <string name="adapter_description">Permite a dos clases con diferentes interfaces
trabajar entre ellas, a través de un objeto intermedio con el
que se comunican e interactúan. </string>
    <string name="bridge">Bridge</string>
    <string name="bridge_description">Desacopla una abstracción de su implementación,
para que las dos puedan evolucionar de forma
independiente.</string>
    <string name="composite">Composite</string>
    <string name="composite_description">Facilita la creación de estructuras de objetos
en árbol, donde todos los elementos emplean una misma
interfaz. Cada uno de ellos puede a su vez contener un
listado de esos objetos, o ser el último de esa rama. </string>
    <string name="decorator">Decorator</string>
    <string name="decorator_description">Permite añadir funcionalidad extra a un objeto
(de forma dinámica o estática) sin modificar el
comportamiento del resto de objetos del mismo tipo.</string>
    <string name="facade">Facade</string>
    <string name="facade_description"> Una facade (o fachada) es un objeto que crea una
interfaz simplificada para tratar con otra parte del código
más compleja, de tal forma que simplifica y aísla su uso.
Un ejemplo podría ser crear una fachada para tratar con
una clase de una librería externa.</string>
    <string name="flyweight">Flyweight</string>
    <string name="flyweight_description">Una gran cantidad de objetos comparte un
mismo objeto con propiedades comunes con el fin de
ahorrar memoria.</string>
    <string name="proxy">Proxy</string>
    <string name="proxy_description">Es una clase que funciona como interfaz hacia
cualquier otra cosa: una conexión a Internet, un archivo en
disco o cualquier otro recurso que sea costoso o
imposible de duplicar.</string>
    <string name="command">Command</string>
    <string name="command_description">Son objetos que encapsulan una acción y los
parámetros que necesitan para ejecutarse.</string>
    <string name="chain_of_responsability">Chain of Responsability</string>
    <string name="chain_of_responsability_description"> se evita acoplar al emisor y
receptor de una petición dando la posibilidad a varios
receptores de consumirlo. Cada receptor tiene la opción
de consumir esa petición o pasárselo al siguiente dentro
de la cadena.</string>
    <string name="interpreter">Interpreter</string>
    <string name="interpreter_description">Define una representación para una gramática
así como el mecanismo para evaluarla. El árbol de sintaxis
del lenguaje se suele modelar mediante el patrón
Composite.</string>
    <string name="iterator">Iterator</string>
    <string name="iterator_description">Se utiliza para poder movernos por los elementos
de un conjunto de forma secuencial sin necesidad de
exponer su implementación específica.</string>
    <string name="mediator">Mediator</string>
    <string name="mediator_description">Objeto que encapsula cómo otro conjunto de
objetos interactúan y se comunican entre sí.</string>
    <string name="memento">Memento</string>
    <string name="memento_description">Este patrón otorga la capacidad de restaurar  un
objeto a un estado anterior.</string>
    <string name="observer">Observer</string>
    <string name="observer_description">Los objetos son capaces de suscribirse a una
serie de eventos que otro objetivo va a emitir, y serán
avisados cuando esto ocurra.</string>
    <string name="state">State</string>
    <string name="state_description">Permite modificar la forma en que un objeto se
comporta en tiempo de ejecución, basándose en su
estado interno.</string>
    <string name="strategy">Strategy</string>
    <string name="strategy_description">Permite la selección del algoritmo que ejecuta
cierta acción en tiempo de ejecución.</string>
    <string name="template_method">Template Method</string>
    <string name="template_method_description">Especifica el esqueleto de un algoritmo,
permitiendo a las subclases definir cómo implementan el
comportamiento real.</string>
    <string name="visitor">Visitor</string>
    <string name="visitor_description">Permite separar el algoritmo de la estructura  de
datos que se utilizará para ejecutarlo. De esta forma se
necesidad de modificarlas.
pueden añadir nuevas operaciones a estas estructuras sin
</string>

</resources>